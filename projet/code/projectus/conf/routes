# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~


GET     /projectus                                                          controllers.HomeController.index

GET     /projectus/superadministrators                                      controllers.AdministratorController.superadministrators
GET     /projectus/supervisors                                              controllers.AdministratorController.supervisors
GET     /projectus/projects                                                 controllers.AdministratorController.projects
POST    /projectus/superadministrators/add                                  controllers.AdministratorController.addSuperAdministrator
POST    /projectus/supervisors/add                                          controllers.AdministratorController.addSupervisor
POST    /projectus/projects/add                                             controllers.AdministratorController.addProject
GET     /projectus/supervisor/:id_supervisor/delete/project/:id_project     controllers.AdministratorController.removeProjectOfSupervisor(id_project:Integer, id_supervisor:Integer)
POST    /projectus/supervisor/getDialogProject                              controllers.AdministratorController.getDialogProjectSupervisor()
POST    /projectus/supervisor/addProjectToSupervisor/:id_supervisor         controllers.AdministratorController.addProjectToSupervisor(id_supervisor:Integer)

POST	/projectus/switch/navigation/:nav		                            controllers.HomeController.switchNav(nav:String)
GET 	/projectus/about		                                            controllers.HomeController.about()

GET     /projectus/dashboard             		                            controllers.DashboardController.dashboard()
POST    /projectus/info/task                                                controllers.DashboardController.infoTask()
POST	/projectus/dashboard/edit	                                        controllers.DashboardController.editState()
POST	/projectus/dashboard/giveup	                                        controllers.DashboardController.giveUp()
POST	/projectus/dashboard/take/task/:id	                                controllers.DashboardController.takeTask(id:Integer)
POST	/projectus/dashboard/state/TOREVIEW/task/log/:task/:worked/:remainingTime	controllers.DashboardController.editTimeWorkedOnTheTaskReview(task:Integer, worked:Integer, remainingTime:Integer)
POST	/projectus/dashboard/state/DOING/task/log/:task/:worked/:remainingTime	    controllers.DashboardController.editTimeWorkedOnTheTaskDoing(task:Integer, worked:Integer, remainingTime:Integer)
GET     /projectus/getDatas/:sprintId            		                            controllers.ChartsController.getDatasMembers(sprintId:Integer)
POST    /projectus/add_com             		                                controllers.DashboardController.addComment()

GET     /projectus/initprod             		                            controllers.InitController.initProd
GET     /projectus/init             			                            controllers.InitController.initTest
GET     /projectus/initcase/:caseId             	                        controllers.InitController.initTestCase(caseId:Integer)
GET     /projectus/init2             			                            controllers.InitController.initEmptyTestProjects

POST    /projectus/login					                                controllers.SessionController.loginPost
GET     /projectus/logout             		                                controllers.SessionController.logout
GET     /projectus/switch/project/:id                                       controllers.SessionController.switchProject(id:Integer)
GET     /projectus/switch/member/:id                                        controllers.SessionController.switchMember(id:Integer)

GET     /projectus/releases             		                            controllers.ReleasesController.index
POST    /projectus/releases/info_release_edit/:id                           controllers.ReleasesController.infoReleaseEdit(id:Integer)
POST    /projectus/release/edit_release                                     controllers.ReleasesController.editRelease()
POST    /projectus/release/add                                              controllers.ReleasesController.addRelease()
GET     /projectus/release/infos/:id                                        controllers.ReleasesController.infosRelease(id:Integer)
GET     /projectus/dial_disable_release/:id            		                controllers.ReleasesController.dialDisableRelease(id:Integer)
GET     /projectus/disable_release/:id          		                    controllers.ReleasesController.disableRelease(id:Integer)
GET     /projectus/activate_release/:id          		                    controllers.ReleasesController.activateRelease(id:Integer)

POST    /projectus/sprint/add                                               controllers.SprintsController.addSprint()
POST    /projectus/sprint/abort/:sprintId                                   controllers.SprintsController.abortSprint(sprintId:Integer)
POST    /projectus/sprint/start/:sprintId                                   controllers.SprintsController.startSprint(sprintId:Integer)
GET     /projectus/sprint/:idSprint                                         controllers.SprintsController.index(idSprint:Integer)
GET     /projectus/get/available-features            		                controllers.SprintsController.getAvailableFeatures
GET     /projectus/release/dates/:releaseId                                 controllers.SprintsController.getDates(releaseId:Integer)
POST    /projectus/sprint/add/feature/:sprintId/:stringFeaturesId           controllers.SprintsController.addFeatureToSprint(sprintId:Integer, stringFeaturesId:String)
GET     /projectus/sprint/modaledit/:sprintId                               controllers.SprintsController.infosSprintEdit(sprintId:Integer)
POST    /projectus/sprint/edit                                              controllers.SprintsController.editSprint()
GET     /projectus/sprint/dates/:sprintId                                   controllers.SprintsController.getDatesWithoutSprint(sprintId:Integer)

POST    /projectus/task/add                                                 controllers.TasksController.addTask()
GET     /projectus/task/modaledit/:taskId                                   controllers.TasksController.infosTaskEdit(taskId:Integer)
GET     /projectus/task/:taskId                                             controllers.TasksController.index(taskId:Integer)
POST    /projectus/task/edit                                                controllers.TasksController.editTask()



GET     /projectus/team             			                            controllers.TeamController.index
GET     /projectus/team/modal/give/role/:memberId             			    controllers.TeamController.modalGiveRole(memberId:Integer)
POST    /projectus/team/give/role             			                    controllers.TeamController.giveRole()
GET     /projectus/deactivatemember/:idMember                               controllers.TeamController.deactivateMember(idMember:Integer)
GET     /projectus/activatemember/:idMember                                 controllers.TeamController.activateMember(idMember:Integer)
GET     /projectus/info/member/:idUser                                    controllers.TeamController.infoMember(idUser:String)
GET     /projectus/dial-add-member                                          controllers.TeamController.dialAddMember()
POST    /projectus/add/member                                               controllers.TeamController.addMember()
POST    /projectus/reset/:cip                                            controllers.TeamController.resetUser(cip:String)
GET     /projectus/datas/member/:member                                     controllers.TeamController.getDatasUser(member:String)

GET     /projectus/product_backlog                                          controllers.ProductBacklogController.index
GET     /projectus/feature/modal/addtosprint/:sprintId                      controllers.ProductBacklogController.getFeatures(sprintId:Integer)
POST    /projectus/feature/add                                              controllers.ProductBacklogController.addFeature
GET     /projectus/feature/infos/:featureId/:editable                       controllers.ProductBacklogController.getInfos(featureId:Integer, editable:Boolean)
GET     /projectus/feature/datas/:featureId                                 controllers.ProductBacklogController.getDatas(featureId:Integer)
POST    /projectus/feature/edit                                             controllers.ProductBacklogController.editFeature
POST    /projectus/feature/disable/:featureId                               controllers.ProductBacklogController.disableFeature(featureId:Integer)
POST    /projectus/feature/activate/:featureId                              controllers.ProductBacklogController.activateFeature(featureId:Integer)


GET     /projectus/meetings           	                                    controllers.MeetingsController.index
POST    /projectus/meetings/add                                             controllers.MeetingsController.addMeeting
POST    /projectus/meetings/info/:meetingId                                 controllers.MeetingsController.infoMeeting(meetingId:Integer)
POST    /projectus/meetings/conclude                                        controllers.MeetingsController.concludeMeeting

GET     /projectus/profil           		                                controllers.ProfilController.index
POST    /projectus/profil/upload/:w/:h                                controllers.ProfilController.upload(w:Integer, h:Integer)
GET     /projectus/profil/logo/dark                                         controllers.ProfilController.showImageDark()
GET     /projectus/profil/logo/light                                        controllers.ProfilController.showImageLight()
POST    /projectus/profil/editProfil                                        controllers.ProfilController.editProfil()
GET     /projectus/profil/logo/:cip                                         controllers.ProfilController.showImageLogo(cip:String)
GET     /projectus/firstLogin                                               controllers.ProfilController.firstLogin
POST    /projectus/profil/edit/password                                     controllers.ProfilController.changePassword

GET     /projectus/history                                                  controllers.HistoryController.index

GET     /projectus/project_info                                             controllers.ProjectController.index
POST    /projectus/project_info/modal_add_project                           controllers.ProjectController.infoProject
POST    /projectus/project_info/edit                                        controllers.ProjectController.editProject()


# Map static resources from the /public folder to the /assets URL path
GET     /projectus/assets/*file                                             controllers.Assets.versioned(path="/public", file: Asset)